Download and install mongoDB

Open command prompt:
c:\Program Files\MongoDB\Server\3.4\bin
>mkdir \data\db    (Make a directory for db- this is the default location)
>mongod            (Setup mongoDB onto our system)

Setup PATH in environment variable so that we can directly run all mongoDB commands 
from cmd(any location) without going to the bin directory.
MyComputer > Properties > Environment Variable > PATH > Add the mongoDB bin location.

Now to run mongoDB commands,
>mongo
start writing the mongo commands.

DB > Collection > documents  :mongo db data hierarchy
--------------
json-generator.com : generate random jsons with required specification.
----------------

use hockey : switches to hockey db if present else creates and switches.{creating database}
Insert:
-------
db.players.insert({json data})            //player collection gets created //here db refers to hockey    {ctrl + Enter on webstorm}
db.players.insert([{json data},{},{}])    //multiple inserts at a time

> db.players.insert({"name": "Harke",
"position":"mid",
"id":10134,
"rank":"305"}
)


--> each document is given a unique id (MongoDB does it by default)

To show all the collections:
>show collections

Find:
-----
db.players.find() : show the list of all records in collection  
db.players.find().pretty() : list of all records in pretty format
db.players.findOne() : one record (the first record)
db.players.find({"id" : 10101})  : search a particular record.
db.players.find({"id" : 10101, "age":21})  multiple search criteria
db.players.findOne({"position" : "mid"}).pretty()  : search record with position mid which was inserted first.
db.players.find({
          $or:[
              {"position":"mid"},
              {"position":"forward"},
          ]
        })                                                // $ represents special characters to perform different type of operations in
                                                          // mongoDB
                                                          
db.players.find({
                "id" : {$gt:300}                          //$gt: greater than  // expressions in mongo $gt,$lt,$gte,$lte
               })                                         // these operations can be run on integer input

db.players.find(
                {"position":"mid"},{"name":1,"_id":0}           // second object indicates the columns required, we require only the 
                )                                               //name attribute, _id is selected by default to we gave it value 0 to
                                                                //unshow it
db.players.find(
                {"position":"mid"},{"name":1,"_id":0}           // limits number of records returned , only first 3 records are returned
                ).limit(3)                                                                
                                                                
db.players.find(
                {"position":"mid"},{"name":1,"_id":0}            // skips first 2 results
                ).skip(2)                




Remove a document
------------------
db.players.remove({"_id" : ObjectId("58fd04e84927aa09cd0cffde")})  : removing a document using id.


Update:
-------
db.players.update({queryparameter},{new document});
Eg: db.players.update({"id" : 10134},{"name":"Charke"})  // give complete object over here

Drop collection:
---------------
db.players.drop

Indexing:
---------
indexing is a way to speed up the performance and efficiency of the database.
Faster accessing of any documents.

db.users.find({
    "age" : {$lt:23}
})                                                            //We have to query through all the documents to find the result
db.users.ensureIndex({"age":1})                               //So we perform indexing on age.
Again run 
db.users.find({
    "age" : {$lt:23}
})                                                           //This time only two documents are queried or traversed.
                                                             //can be checked by adding .explain("executionStats")
Drop Index:
db.users.dropIndex({"age":1})
  
If we index all the columns, then any time we add a document we need to update index for each column  
Index the column that you search the most, and uniquely identify , like id, name

Aggregate Functions:
--------------------
Sum:
----
 db.users.aggregate({
    $group : {
        _id : "$eyeColor",
        total : {$sum : 1}
    }
})                                          //aggregate, group and _id are required

Avg:
----
db.users.aggregate({
    $group : {
        _id : "$gender",
        avgAge : {$avg : "$age"}
    }
})

Max:
----
db.users.aggregate({
    $group : {
        _id : "$gender",
        Richest : {$max : "$balance"}
    }
})

Min:
----
Similar to max.


Others:
-------
mock data: https://github.com/buckyroberts/Source-Code-from-Tutorials/blob/master/Other/SampleJsonData/fake_bank_data.json

