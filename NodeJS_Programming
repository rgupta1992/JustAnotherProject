Programming:
JavaScript Object:

var person = { 'name':'Rahul', 'age':23}
function:
----------
>function without return statement, returns undefined when called.
>We can intialize a variable with anynomous function.

var hello = function(){
                       console.log("Hello");
                       };
hello();                // prints Hello
We can pass this fuction to other functions using the variable.
Eg:   setTimeout(hello, 5000);                  //print hello after 5 seconds.

----------------------------
Handling Multiple Request:
---------------------------

Users   --  Server  --  DB
>Server takes some time to get data from DB.
>If there are large number of users and server needs process each request one by one , it takes a lot of time.
>So instead of waiting for a request to complete before getting another request, the server can take request from
 other users and start processing those parallely.
>Once the request are process the server provides the response.This way the server does not need to stay idle until a request is 
  processed.

Eg:
function placeAnOrder(orderNumber) {
    console.log("Order Number"+ orderNumber)

    cookFood(function(){
        console.log("Order Received for order Number: "+ orderNumber);
    });
}

function cookFood(callBackFunction){
    setTimeout(callBackFunction,5000);           //setTimeout tells that we need to wait for 5 seconds to execute callBackFunction
}                                                //but till then we can move to the next step.. i.e we are performing execution
                                                 // asynchronously.
placeAnOrder(1);
placeAnOrder(2);
placeAnOrder(3);
placeAnOrder(4);
placeAnOrder(5);

-----------------------
References to Objects:
----------------------

In javascript everything is a reference.

Eg:
var a = {
    'fruit':'Mango',
    'taste' : 'sweet'
}

var b = a;
b.fruit = 'Orange';

console.log(a.fruit);    // Output is Orange this is because 'b' doesnt create a copy of 'a' but just references to the object a.

We must use Object.assign to create a new object;
var c = Object.assign({},a);
c.fruit = 'Guava';
console.log(c.fruit);     // Guava
console.log(a.fruit);     // Orange

-------------
this keyword:
-------------

this is reference to whatever thing is calling it.
Eg:
var Rahul = {
    printDetails : function()              // while we create a class with var, need to create a function in this way.(But no need for 
    {                                      // this in ReactJS
    console.log('My name is Rahul');
    console.log(this === Rahul);          //true   
    }
};

Rahul.printDetails();                    // This method is called by Rahul object 

function printDetails(){
    console.log('My name is Something');
    console.log(this === global);         //true
}
printDetails();                          //This method is called in global context.

----------
Prototype:
----------
We can add methods and properties to classes using prototype.

A cool example using this keyword and prototype:

var User = function(){
    this.name = "";
    this.life = 100;
    this.giveLife = function (targetPlayer){
        targetPlayer.life += 1;
        console.log(this.name + "gave life to" + targetPlayer.name);
    }
}

var Mane = new User();
var Munde = new User();
Mane.name = "Mane";
Munde.name = "Munde";
Mane.giveLife(Munde);
console.log("Life of Mane:"+ Mane.life);
console.log("Life of Munde:"+ Munde.life);

User.prototype.attack = function(targetPlayer){
    targetPlayer.life -= 3;
    console.log(this.name + "attacked" + targetPlayer.name);
}
Mane.attack(Munde);
console.log("Life of Mane:"+ Mane.life);
console.log("Life of Munde:"+ Munde.life);

//Here whoever call the user fuction becomes this.
// Prototype helps to add attack function to the existing user class.


--------
Modules:
--------
Instead of writing all the javascript codes into one file, we can divide it into multiple files,
these files are known as modules. 
We group similar codes together into a file
We use import/export to use one module into another.

export:
module.exports.variableName = functionName;

import:
var someVariableName = require('./fileName');
someVariableName.variableName;

Eg:
movies.js:
---------
function printBahubaliBeginning(){
   console.log("Bahubali Beginning");
}

function  printBahubaliConclusion() {
    console.log("Bahubali Conclusion");
}

module.exports.beginning = printBahubaliBeginning;
module.exports.ending = printBahubaliConclusion;

testMovies.js:
------------
var movies = require('./movies');

movies.beginning();
movies.ending();

------------> Need to check impot export commands.





